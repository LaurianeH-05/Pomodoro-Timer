{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cupid\\\\New folder (2)\\\\Projects\\\\pomodoro-app\\\\client\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Timer from \"../components/Timer\";\nimport Control from \"../components/Control\";\nimport Settings from \"../components/Settings\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [workMinutes, setWorkMinutes] = useState(25);\n  const [breakMinutes, setBreakMinutes] = useState(5);\n  const [isActive, setIsActive] = useState(false);\n  const [isWorkMode, setIsWorkMode] = useState(true);\n  const [minutes, setMinutes] = useState(workMinutes);\n  const [seconds, setSeconds] = useState(0);\n  const handleStart = () => {\n    setIsActive(true);\n    setIsWorkMode(true); // Start in work mode\n    setMinutes(workMinutes); // Set minutes to initial work minutes\n    setSeconds(0); // Reset seconds when starting\n  };\n  const handlePause = () => setIsActive(false);\n  const handleReset = () => {\n    setIsActive(false);\n    setIsWorkMode(true);\n    setMinutes(workMinutes);\n    setSeconds(0);\n  };\n  const handleCustomSet = (customWork, customBreak) => {\n    setWorkMinutes(customWork);\n    setBreakMinutes(customBreak);\n    setIsActive(false); // Stop the timer when updating custom times\n    setIsWorkMode(true);\n    setMinutes(customWork); // Reset to custom work minutes\n    setSeconds(0); // Reset seconds\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pomodoro Timer Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      isActive: isActive,\n      isWorkMode: isWorkMode,\n      workMinutes: workMinutes,\n      breakMinutes: breakMinutes,\n      minutes: minutes,\n      seconds: seconds,\n      setMinutes: setMinutes,\n      setSeconds: setSeconds,\n      setIsWorkMode: setIsWorkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Control, {\n      onStart: handleStart,\n      onPause: handlePause,\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Settings, {\n      onCustomSet: handleCustomSet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"sPxT1Ajjqo6L93vh9zvnBZNm+24=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","Timer","Control","Settings","jsxDEV","_jsxDEV","Dashboard","_s","workMinutes","setWorkMinutes","breakMinutes","setBreakMinutes","isActive","setIsActive","isWorkMode","setIsWorkMode","minutes","setMinutes","seconds","setSeconds","handleStart","handlePause","handleReset","handleCustomSet","customWork","customBreak","children","fileName","_jsxFileName","lineNumber","columnNumber","onStart","onPause","onReset","onCustomSet","_c","$RefreshReg$"],"sources":["C:/Users/Cupid/New folder (2)/Projects/pomodoro-app/client/src/pages/Dashboard.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Timer from \"../components/Timer\";\r\nimport Control from \"../components/Control\";\r\nimport Settings from \"../components/Settings\";\r\n\r\nconst Dashboard = () => {\r\n  const [workMinutes, setWorkMinutes] = useState(25);\r\n  const [breakMinutes, setBreakMinutes] = useState(5);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [isWorkMode, setIsWorkMode] = useState(true);\r\n  const [minutes, setMinutes] = useState(workMinutes);\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  const handleStart = () => {\r\n    setIsActive(true);\r\n    setIsWorkMode(true); // Start in work mode\r\n    setMinutes(workMinutes); // Set minutes to initial work minutes\r\n    setSeconds(0); // Reset seconds when starting\r\n  };\r\n\r\n  const handlePause = () => setIsActive(false);\r\n\r\n  const handleReset = () => {\r\n    setIsActive(false);\r\n    setIsWorkMode(true);\r\n    setMinutes(workMinutes);\r\n    setSeconds(0);\r\n  };\r\n\r\n  const handleCustomSet = (customWork, customBreak) => {\r\n    setWorkMinutes(customWork);\r\n    setBreakMinutes(customBreak);\r\n    setIsActive(false); // Stop the timer when updating custom times\r\n    setIsWorkMode(true);\r\n    setMinutes(customWork); // Reset to custom work minutes\r\n    setSeconds(0); // Reset seconds\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Pomodoro Timer Dashboard</h1>\r\n      <Timer\r\n        isActive={isActive}\r\n        isWorkMode={isWorkMode}\r\n        workMinutes={workMinutes}\r\n        breakMinutes={breakMinutes}\r\n        minutes={minutes}\r\n        seconds={seconds}\r\n        setMinutes={setMinutes}\r\n        setSeconds={setSeconds}\r\n        setIsWorkMode={setIsWorkMode}\r\n      />\r\n      <Control onStart={handleStart} onPause={handlePause} onReset={handleReset} />\r\n      <Settings onCustomSet={handleCustomSet} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAACQ,WAAW,CAAC;EACnD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EAEzC,MAAMoB,WAAW,GAAGA,CAAA,KAAM;IACxBP,WAAW,CAAC,IAAI,CAAC;IACjBE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IACrBE,UAAU,CAACT,WAAW,CAAC,CAAC,CAAC;IACzBW,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,MAAME,WAAW,GAAGA,CAAA,KAAMR,WAAW,CAAC,KAAK,CAAC;EAE5C,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxBT,WAAW,CAAC,KAAK,CAAC;IAClBE,aAAa,CAAC,IAAI,CAAC;IACnBE,UAAU,CAACT,WAAW,CAAC;IACvBW,UAAU,CAAC,CAAC,CAAC;EACf,CAAC;EAED,MAAMI,eAAe,GAAGA,CAACC,UAAU,EAAEC,WAAW,KAAK;IACnDhB,cAAc,CAACe,UAAU,CAAC;IAC1Bb,eAAe,CAACc,WAAW,CAAC;IAC5BZ,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;IACpBE,aAAa,CAAC,IAAI,CAAC;IACnBE,UAAU,CAACO,UAAU,CAAC,CAAC,CAAC;IACxBL,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC;EAED,oBACEd,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCzB,OAAA,CAACJ,KAAK;MACJW,QAAQ,EAAEA,QAAS;MACnBE,UAAU,EAAEA,UAAW;MACvBN,WAAW,EAAEA,WAAY;MACzBE,YAAY,EAAEA,YAAa;MAC3BM,OAAO,EAAEA,OAAQ;MACjBE,OAAO,EAAEA,OAAQ;MACjBD,UAAU,EAAEA,UAAW;MACvBE,UAAU,EAAEA,UAAW;MACvBJ,aAAa,EAAEA;IAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACFzB,OAAA,CAACH,OAAO;MAAC6B,OAAO,EAAEX,WAAY;MAACY,OAAO,EAAEX,WAAY;MAACY,OAAO,EAAEX;IAAY;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7EzB,OAAA,CAACF,QAAQ;MAAC+B,WAAW,EAAEX;IAAgB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAACvB,EAAA,CAnDID,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAqDf,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}