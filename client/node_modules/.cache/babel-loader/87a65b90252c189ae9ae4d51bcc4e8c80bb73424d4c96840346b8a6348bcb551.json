{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cupid\\\\New folder (2)\\\\Projects\\\\pomodoro-app\\\\client\\\\src\\\\pages\\\\LoginPage.js\";\n//LoginPage.js\n\nimport React, { useState } from 'react';\nimport { loginUser } from './services/authServices'; // Adjust path if needed\nimport { useNavigate } from 'react-router-dom'; // If using React Router for navigation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"LoginPage\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 12\n  }, this);\n};\n_c = LoginPage;\nexport default LoginPage;\n\n// const LoginPage = () => {\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [error, setError] = useState(null);\n//   const navigate = useNavigate(); // For redirecting after successful login\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault(); // Prevent page reload\n//     try {\n//       const userData = await loginUser(email, password); // Call login service\n//       // On successful login, you can navigate to the dashboard or another page\n//       navigate('/dashboard'); // Change to the appropriate page in your app\n//     } catch (err) {\n//       setError('Invalid email or password'); // Display error message if login fails\n//     }\n//   };\n\n//   return (\n//     <div className=\"login-container\">\n//       <h2>Login</h2>\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>Email:</label>\n//           <input\n//             type=\"email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div>\n//           <label>Password:</label>\n//           <input\n//             type=\"password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <button type=\"submit\">Login</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","loginUser","useNavigate","jsxDEV","_jsxDEV","LoginPage","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Cupid/New folder (2)/Projects/pomodoro-app/client/src/pages/LoginPage.js"],"sourcesContent":["//LoginPage.js\r\n\r\nimport React, { useState } from 'react';\r\nimport { loginUser } from './services/authServices'; // Adjust path if needed\r\nimport { useNavigate } from 'react-router-dom'; // If using React Router for navigation\r\n\r\nconst LoginPage = () => {\r\n    return <h1>LoginPage</h1>   \r\n};\r\nexport default LoginPage;\r\n\r\n// const LoginPage = () => {\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [error, setError] = useState(null);\r\n//   const navigate = useNavigate(); // For redirecting after successful login\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault(); // Prevent page reload\r\n//     try {\r\n//       const userData = await loginUser(email, password); // Call login service\r\n//       // On successful login, you can navigate to the dashboard or another page\r\n//       navigate('/dashboard'); // Change to the appropriate page in your app\r\n//     } catch (err) {\r\n//       setError('Invalid email or password'); // Display error message if login fails\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"login-container\">\r\n//       <h2>Login</h2>\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label>Email:</label>\r\n//           <input\r\n//             type=\"email\"\r\n//             value={email}\r\n//             onChange={(e) => setEmail(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>Password:</label>\r\n//           <input\r\n//             type=\"password\"\r\n//             value={password}\r\n//             onChange={(e) => setPassword(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <button type=\"submit\">Login</button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default LoginPage;\r\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,yBAAyB,CAAC,CAAC;AACrD,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,oBAAOD,OAAA;IAAAE,QAAA,EAAI;EAAS;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAC7B,CAAC;AAACC,EAAA,GAFIN,SAAS;AAGf,eAAeA,SAAS;;AAExB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}