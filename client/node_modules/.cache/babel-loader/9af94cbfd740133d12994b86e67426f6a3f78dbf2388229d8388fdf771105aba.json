{"ast":null,"code":"// authServices.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nexport const loginUser = async (email, password) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (email === 'test@test.com' && password === 'password') {\n        const mockData = {\n          token: 'fake-token',\n          user: {\n            email: 'test@test.com'\n          }\n        };\n        localStorage.setItem('token', mockData.token); // Simulate storing token\n        resolve(mockData);\n      } else {\n        reject(new Error('Invalid email or password'));\n      }\n    }, 1000); // Simulate a delay\n  });\n};\nexport const signupUser = async (username, password) => {\n  try {\n    const response = await axios.post('/api/signup', {\n      username,\n      password\n    });\n    return response.data; // Return user data or token from the server\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Signup failed');\n  }\n};\n\n// export const loginUser = async (email, password) => {\n//   try {\n//     const response = await axios.post(`${API_URL}/login`, { email, password });\n//     const { token } = response.data;\n//     localStorage.setItem('token', token); // Store the token locally\n//     return response.data;\n//   } catch (error) {\n//     console.error('Error logging in:', error);\n//     throw error;\n//   }\n// };","map":{"version":3,"names":["axios","API_URL","loginUser","email","password","Promise","resolve","reject","setTimeout","mockData","token","user","localStorage","setItem","Error","signupUser","username","response","post","data","error","_error$response","_error$response$data","message"],"sources":["C:/Users/Cupid/New folder (2)/Projects/pomodoro-app/client/src/services/authServices.js"],"sourcesContent":["// authServices.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nexport const loginUser = async (email, password) => {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (email === 'test@test.com' && password === 'password') {\r\n          const mockData = { token: 'fake-token', user: { email: 'test@test.com' } };\r\n          localStorage.setItem('token', mockData.token); // Simulate storing token\r\n          resolve(mockData);\r\n        } else {\r\n          reject(new Error('Invalid email or password'));\r\n        }\r\n      }, 1000); // Simulate a delay\r\n    });\r\n  };\r\n\r\n  export const signupUser = async (username, password) => {\r\n    try {\r\n      const response = await axios.post('/api/signup', {\r\n        username,\r\n        password,\r\n      });\r\n      return response.data; // Return user data or token from the server\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Signup failed');\r\n    }\r\n  };\r\n\r\n// export const loginUser = async (email, password) => {\r\n//   try {\r\n//     const response = await axios.post(`${API_URL}/login`, { email, password });\r\n//     const { token } = response.data;\r\n//     localStorage.setItem('token', token); // Store the token locally\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Error logging in:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAChD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,UAAU,CAAC,MAAM;MACf,IAAIL,KAAK,KAAK,eAAe,IAAIC,QAAQ,KAAK,UAAU,EAAE;QACxD,MAAMK,QAAQ,GAAG;UAAEC,KAAK,EAAE,YAAY;UAAEC,IAAI,EAAE;YAAER,KAAK,EAAE;UAAgB;QAAE,CAAC;QAC1ES,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC;QAC/CJ,OAAO,CAACG,QAAQ,CAAC;MACnB,CAAC,MAAM;QACLF,MAAM,CAAC,IAAIO,KAAK,CAAC,2BAA2B,CAAC,CAAC;MAChD;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEZ,QAAQ,KAAK;EACtD,IAAI;IACF,MAAMa,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,aAAa,EAAE;MAC/CF,QAAQ;MACRZ;IACF,CAAC,CAAC;IACF,OAAOa,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACd,MAAM,IAAIR,KAAK,CAAC,EAAAO,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBC,OAAO,KAAI,eAAe,CAAC;EACnE;AACF,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}