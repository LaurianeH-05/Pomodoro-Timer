{"ast":null,"code":"//authServices.js\nimport axios from 'axios';\n\n// Replace with your backend API URL\nconst API_URL = 'http://localhost:5000/api';\n\n// Login user with real backend\nexport const loginUser = async (username, password) => {\n  // Updated to accept username\n  try {\n    const response = await axios.post(`${API_URL}/login`, {\n      username,\n      password\n    }); // Changed email to username\n    const {\n      user\n    } = response.data; // Adjusted to not expect token\n    return {\n      user\n    }; // Return the user data\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n  }\n};\n\n// Sign up new user with real backend\nexport const signupUser = async (username, email, password) => {\n  // Updated to accept email\n  try {\n    const response = await axios.post(`${API_URL}/signup`, {\n      username,\n      email,\n      password\n    }); // Included email in request\n    return response.data; // Return user data from the server\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Signup failed');\n  }\n};","map":{"version":3,"names":["axios","API_URL","loginUser","username","password","response","post","user","data","error","_error$response","_error$response$data","Error","message","signupUser","email","_error$response2","_error$response2$data"],"sources":["C:/Users/Cupid/New folder (2)/Projects/pomodoro-app/client/src/services/authServices.js"],"sourcesContent":["//authServices.js\r\nimport axios from 'axios';\r\n\r\n// Replace with your backend API URL\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Login user with real backend\r\nexport const loginUser = async (username, password) => { // Updated to accept username\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, { username, password }); // Changed email to username\r\n    const { user } = response.data; // Adjusted to not expect token\r\n    return { user }; // Return the user data\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Login failed');\r\n  }\r\n};\r\n\r\n// Sign up new user with real backend\r\nexport const signupUser = async (username, email, password) => { // Updated to accept email\r\n  try {\r\n    const response = await axios.post(`${API_URL}/signup`, { username, email, password }); // Included email in request\r\n    return response.data; // Return user data from the server\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Signup failed');\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAAE;EACvD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,QAAQ,EAAE;MAAEE,QAAQ;MAAEC;IAAS,CAAC,CAAC,CAAC,CAAC;IAC/E,MAAM;MAAEG;IAAK,CAAC,GAAGF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAChC,OAAO;MAAED;IAAK,CAAC,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACd,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACJ,QAAQ,cAAAK,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,cAAc,CAAC;EAClE;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOX,QAAQ,EAAEY,KAAK,EAAEX,QAAQ,KAAK;EAAE;EAC/D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,SAAS,EAAE;MAAEE,QAAQ;MAAEY,KAAK;MAAEX;IAAS,CAAC,CAAC,CAAC,CAAC;IACvF,OAAOC,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAO,gBAAA,EAAAC,qBAAA;IACd,MAAM,IAAIL,KAAK,CAAC,EAAAI,gBAAA,GAAAP,KAAK,CAACJ,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBR,IAAI,cAAAS,qBAAA,uBAApBA,qBAAA,CAAsBJ,OAAO,KAAI,eAAe,CAAC;EACnE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}